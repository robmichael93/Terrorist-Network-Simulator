/*
 * RecruiterSensor.java
 *
 * Created on March 18, 2003, 12:10 PM
 */

package tns.sensors;
import tns.agents.*;
import tns.roles.*;
import mil.navy.nps.relate.*;
import java.util.*;
import java.awt.*;

/**
 *
 * @author  robmichael
 */
public class RecruiterSensor implements TNSSensor {
    
    private double range;

    /** Creates a new instance of RecruiterSensor */
    public RecruiterSensor(double r) {
        range = r;
    }
    
    public Vector findSensedAgents(Agent sensingAgent, Vector agents) {
        Point location = ((TerroristAgent)sensingAgent).getLocation();
        Vector sensedAgents = new Vector();
        // for each sensor, check to see if it finds agents
        for (int i = 0; i < agents.size(); i++) {
            TerroristAgent t = (TerroristAgent)agents.elementAt(i);
            // if the distance between agents is less than the sensor
            // range, then add the agent to the list of sensed agents
            Vector roles = t.getRoleVector();
            Enumeration e3 = roles.elements();
            while (e3.hasMoreElements()) {
                Role role = (Role)e3.nextElement();
                if (role instanceof RecruiterRole && 
                    location.distance(t.getLocation()) <= range && 
                    !sensedAgents.contains(t) && sensingAgent != t ) {
//                    System.out.println(sensingAgent.getEntityName() + " detected " + t.getAgentName());
                    sensedAgents.add(t);
                } // end if
            } // end while
        } // end for
        return sensedAgents;
    }
    
    public double getRange() { return range; }
    
    public void setRange(double r) {
        range = r;
    }
    
}
