package com.armygame.recruits.localhostio;/* * Title:        MOVES Recruits game * Description:  TCP IO class (for connection to Director Multi-user xtra) * Copyright:    Copyright (c) 2001 * Organization: MOVES Institute, Naval Postgraduate School */import java.net.ServerSocket;import java.net.Socket;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer;import com.armygame.recruits.*;/*** The <b>LocalHostIO</b> class implements a "TCP socket listener" class for the Recruits * game.  Its constructor should typically be called in the context of a separate thread, since it * blocks until a connection is made to it. * Communication is assumed to be text-based, and "messages" are delimited by * new line characters.  A "polling" receiver interface is supported ({@link #receive receive()}), * but the preferred technique to receive messages is probably to give this object a * "listener" ({@link #setReceiver(LocalHostIOListener) setReceiver()}), to which * messages will be passed asynchronously.  * * @version 1.0 * @author  Mike Bailey * @see     LocalHostIOListener * @since   JDK 1.3.1 */public class LocalHostIO/**********************/{  public static int DEFAULT_PORT = 3002;  private int port;  private ServerSocket svrsocket;  private Socket       socket;  private PrintWriter wrt;  private BufferedReader rdr;  private LocalHostIOListener receiver;  private ReceiverThred rt;  /**   * Create a connection on the default port (see {@link #DEFAULT_PORT}).   */  public LocalHostIO()  //==================  {    this (DEFAULT_PORT);  }  /**   * Create a connection on a specific TCP port.   * @param port TCP port number.   */  public LocalHostIO(int port)  //==========================  {    this.port = port;    try { svrsocket = new ServerSocket(port); }    catch (java.io.IOException e)    {      throw new RuntimeException("Error in LocalHostIO constructor.new ServerSocket "+e);    }    //accept();  }  /**   * Create a connection on a specific TCP port, passing a receive-listener   * @param port TCP port number.   * @param lis Object implementing the {@link LocalHostIOListener} interface.   */  public LocalHostIO(int port, LocalHostIOListener lis)  //=========================================================  {    this (port);    setReceiver(lis);   }  /**   * Create a connection on a the default TCP port, passing a receive-listener   * @param lis Object implementing the {@link LocalHostIOListener} interface.   */  public LocalHostIO(LocalHostIOListener lis) throws IOException  //============================================================  {    this(DEFAULT_PORT,lis);  }    public void go()  //---------------  {    try { accept(); }    catch (java.io.IOException e)    {      throw new RuntimeException("Error in LocalHostIO.go.accept()");    }  }    private void accept() throws IOException  //--------------------------------------  {    socket = svrsocket.accept();      // blocks    rdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));    wrt = new PrintWriter   (socket.getOutputStream(),true);  }  /**   * Send a formatted (i.e., properly delimited) message   * @param s  Message; first token is type.   */  public synchronized void send(String s)  //-------------------------------------  {    wrt.print(s);    wrt.flush();  }  /**   * Get the last undelivered message.   * @return Message (String); first token is type or null if no messages available to be read.   */  public String receive() throws java.io.IOException  //------------------------------------------------  {    if(rdr.ready())      return rdr.readLine();    else      return null;  }  /**   * Kill the connection, optionally waiting for a new one.  Blocks until new connection is made.   * @param restart True means kill, then wait for a new connection   */  public void close(boolean restart) throws java.io.IOException  //--------------------------------  {    try{socket.close();}catch(IOException exc){}    if(restart)      accept();  }  /**   * Set an asynchronous message receiver.   * @param lis Object implementing {@link LocalHostIOListener} interface   */  public void setReceiver(LocalHostIOListener lis)  //-----------------------------------------------  {    this.receiver = lis;    if( rt == null )      rt = new ReceiverThred();  }  class ReceiverThred implements Runnable  /**************************************/  {    ReceiverThred()    //==============    {      new Thread(this).start();    }    public void run()    //---------------    {      String line;      int i=0;      try      {        while((line = rdr.readLine()) != null)        {          receiver.lineReceiver(new StringTokenizer(line));        }        throw new IOException("receive loop failure");      }      catch(IOException ex)      {        throw new RuntimeException(ex.getMessage());      }    }  }/**********************************************************************/  /**   * <i>TEST CODE</i>   */   /*  public static void main(String[] args)  {    //LocalHostIO g;    System.out.println("Waiting for a connection...");    new Thread(new Runnable()    {      public void run()      {        LocalHostIO g = new LocalHostIO();        g.go();        System.out.println("Got a connection!");        // Set up a receiver                portListener pl = new portListener();        g.setReceiver(pl);        //g.setReceiver(new portListener());System.out.println("Receiver set");        String line = null;        try        {          BufferedReader br = new BufferedReader(new InputStreamReader(System.in));          while( (line=br.readLine()) != null)          {            System.out.println("localhostio sending...");            g.send("<?xml version=\"1.0\"?><e1>"+               "<tagName attr1=\"val1\" attr2=\"val2\"/>"+               "<e2>element2</e2><e3>element3</e3>"+               line+               "</e1></xml>\n");          }        }        catch(Exception e)        {          System.out.println("exception in System.in.read()");        }        try{g.close(false);}catch(IOException e){System.out.println("excep on close");}        System.out.println("Exit");      }    }).start();        try{Thread.sleep(2000);}catch(Exception e){}        new DirectorStandin();  }  */}//class portListener implements LocalHostIOListener/***********************************************///{//  public void lineReceiver(StringTokenizer st)//  {//    System.out.println("From dir: "+st.toString());//  }//}