package com.armygame.recruits.localhostio;/* * Title:        MOVES Recruits game * Description:  Utility class to listen for a specific LocalHostIO message type * Copyright:    Copyright (c) 2001 * Organization: MOVES Institute, Naval Postgraduate School * @version 1.0 * @author  Mike Bailey * @since   JDK 1.3.1 */import java.io.IOException;import java.util.StringTokenizer;import java.util.Vector;import java.util.HashMap;/** * The <b>LHIOMessageWrapper</b> class is a convenience class for using LocalHostIO.  It allows * establishment of particular asynch listeners for individual message types. * Typical usage: * <pre> *   LHIOMessageWrapper mw = new LHIOMessageWrapper(); *   mw.setListener("INIT", new LocalHostIOListener() *   { *     public void lineReceiver(String s) *     { *       // do something with message s *     } *   }); *   mw.setListener("GETCHAR", new LocalHostIOListener() *   { *     public void lineReceiver(String s) *     { *       // do something with message s *     } *   }); * </pre> *  */public class LHIOMessageWrapper //extends LocalHostIO//================================================={  LocalHostIO io;  StringTokenizer st;  Vector syncVector;  HashMap listenerHM;    /**   * Create a connection on a specific TCP port.   * @param port TCP port number.   */  public LHIOMessageWrapper(int port) throws IOException  //====================================================  {    io = new LocalHostIO(port);    commonConstruct();  }    /**   * Create a connection on the default port (see {@link LocalHostIO#DEFAULT_PORT}).   */  public LHIOMessageWrapper() throws IOException  //============================================  {    io = new LocalHostIO();    commonConstruct();  }  private void commonConstruct()  //----------------------------  {    listenerHM = new HashMap();    syncVector = new Vector();  }  public void go()  //--------------  {    io.go();    io.setReceiver(new LocalHostIOListener ()    {      public void lineReceiver(StringTokenizer st)      {        privateReceiver(st);      }    });      }  /**   * Get next queued received message without blocking.  An installed listener for   * a particular message type has a higher priority than this method,   * and it therefore receives all appropriate messages.  In that case, no messages of that specific   * type will be available here.   */  public String receive()  //-----------------  { // This now seems very clumsy    pair pr = (pair)syncVector.firstElement();    String rets = pr.typ + "\t";    while(pr.st.hasMoreTokens())    {      rets = rets+pr.st.nextToken() + "\t";    }    return rets;  }    /**   * Send a formatted (i.e., properly delimited) message   * @param s  Message; first token is type.   */  public void send(String s)  //------------------------  {    io.send(s+"\n\r");  }  /**   * Implements {@link LocalHostIOListener} interface to its internal   * {@link LocalHostIO} object.  Not normally called by user.   */  private void privateReceiver(StringTokenizer st)  //---------------------------------  {    if(st.countTokens() <= 0)      throw new RuntimeException("Bad message in LHIOMessageWrapper");    String typ = st.nextToken().toUpperCase();System.out.println("LHIOMessageWrapper got "+typ);    LHIOMessageListener il = (LHIOMessageListener)listenerHM.get(typ);    if(il != null)      il.lineReceiver(typ,st);    else      syncVector.add(new pair(typ,st));  }    /**   * Set up a listener for a particular message type.   * @param typ  Message type.   * @param lhil Object (interface implementor) to receive message.   */  public LHIOMessageListener setReceiver(String typ, LHIOMessageListener lhil)  //--------------------------------------------------------------------------------  {    return (LHIOMessageListener)listenerHM.put(typ.toUpperCase(),lhil);  }    // Internal struct.:  class pair  {    String typ;    StringTokenizer st;    pair(String typ, StringTokenizer st)    {      this.typ = typ;      this.st = st;    }  }}